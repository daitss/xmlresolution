#!/usr/bin/env ruby

# Given a file, run a proxied validator over it, collecting, from the
# proxy log files, those locations that it gathered to validate it.
# We do this as part of a test to compare its results with our
# resolver's locations.

require 'socket'


VALIDATOR_OK = "Warnings: 0\nErrors: 0\nFatal Errors: 0\n"


proxy = 'localhost:3128'
proxy_host, proxy_port = proxy.split(':')

jarfile = 'xmlvalidator.jar'
jarpath = File.join(File.dirname(__FILE__), jarfile)

if not File.exists? jarpath
  STDERR.puts "Can't find #{jarfile} (checked #{File.dirname(__FILE__)})"
  exit
end

file = ARGV[0]

if (file.nil?) 
  STDERR.puts "No file specified: enter a file name on the command line.\n";
  exit
end

if (not File.exists? file) 
  STDERR.puts "File #{file} does not exist: enter file name on the command line\n";
  exit
end

eof = nil
open("/opt/local/var/squid/logs/access.log") do |fd|
  fd.seek 0, IO::SEEK_END
  eof = fd.tell 
end

cmd = "java -Dhttp.proxyHost=#{proxy_host} -Dhttp.proxyPort=#{proxy_port} -Dfile='#{file}' -jar '#{jarpath}'"

validator_output =  `#{cmd}`

if validator_output != VALIDATOR_OK
  puts validator_output
end

locations = {}

open("/opt/local/var/squid/logs/access.log") do |fd|
  fd.seek eof, IO::SEEK_SET
  while not fd.eof?
    line = fd.gets.chomp
    line =~ /GET (.*?)\s+/    
    locations[$1] = true
  end
end

puts locations.keys.sort.join("\n") unless locations.keys.empty?



